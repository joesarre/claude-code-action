name: 'Claude Code Action'
description: 'Runs Claude Code on the local repository'
icon: git-pull-request
color: red
outputs:
  result:
    description: 'The output from Claude Code'
    value: ${{ steps.claude.outputs.result }}
inputs:
  prompt:
    description: 'The prompt to Claude Code'
    required: false
  prompt-file:
    description: 'The file to pipe into Claude Code'
    required: false
  acknowledge-dangerously-skip-permissions-responsibility:
    description: 'By setting this value to "true", you accept that you have read and agreed to the disclaimer which is shown when running `claude code --dangerously-skip-permissions`'
    required: true
  github-token:
    description: 'The GitHub token to use for the Pull Request'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Check acknowledgement
      shell: bash
      run: |
        if [ "${{ inputs.acknowledge-dangerously-skip-permissions-responsibility }}" != "true" ]; then
          echo "Error: You must set acknowledge-dangerously-skip-permissions-responsibility to true to use this action."
          echo "This acknowledges that you have read and agreed to the disclaimer shown when running 'claude code --dangerously-skip-permissions'."
          exit 1
        fi
        echo "Acknowledgement confirmed."

    - name: Validate prompt inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.prompt }}" ] && [ -z "${{ inputs.prompt-file }}" ]; then
          echo "Error: You must provide either 'prompt' or 'prompt-file' input."
          exit 1
        fi
        echo "Prompt input validation passed."

    - name: Setup Claude Config for Docker
      shell: bash
      run: |
        mkdir -p ${GITHUB_ACTION_PATH}/claude-code/.claude
        cat ${GITHUB_ACTION_PATH}/config_template.json | sed 's/CLAUDE_API_KEY/${{ env.ANTHROPIC_API_KEY }}/' > ${GITHUB_ACTION_PATH}/claude-code/.claude/config.json
        chmod 666 ${GITHUB_ACTION_PATH}/claude-code/.claude/config.json
        echo "Claude config created for Docker mount"

    - name: Start Claude Docker container
      shell: bash
      run: |
        echo "Starting Claude Docker container..."

        # Get the UID and GID of the current user on the host (the runner)
        HOST_UID=$(id -u)
        HOST_GID=$(id -g)
        echo "Host runner UID:GID = $HOST_UID:$HOST_GID"

        # Start the container with the host's UID and GID
        docker run -dit --rm \
          --name claude-code-container \
          --cap-add=NET_ADMIN --cap-add=NET_RAW \
          -e NODE_OPTIONS="--max-old-space-size=4096" \
          -e CLAUDE_CONFIG_DIR="/home/node/.claude" \
          -e POWERLEVEL9K_DISABLE_GITSTATUS="true" \
          -v claude-code-bashhistory:/commandhistory \
          -v "${GITHUB_ACTION_PATH}/claude-code/.claude:/home/node/.claude" \
          -v "$(pwd)":/workspace:delegated \
          -w /workspace \
          --user $HOST_UID:$HOST_GID \
          ghcr.io/${{ github.repository_owner }}/claude-code-action/claude-code-sandbox:latest

        # Run the init-firewall script inside the container as root
        docker exec -u root claude-code-container /usr/local/bin/init-firewall.sh

        # Change ownership of directories that were originally owned by node user
        # This ensures the container user (with host UID/GID) can access these directories
        docker exec -u root claude-code-container bash -c "
          chown -R $HOST_UID:$HOST_GID /usr/local/share/npm-global /usr/local/share
          chown -R $HOST_UID:$HOST_GID /commandhistory
          chown -R $HOST_UID:$HOST_GID /home/node/.claude
        "

        # Check that /home/node/.claude/config.json exists and is accessible
        docker exec -u $HOST_UID:$HOST_GID claude-code-container test -f /home/node/.claude/config.json

    - name: Setup GitHub credentials for PR creation
      shell: bash
      run: |
        # Use GITHUB_TOKEN to authenticate git operations
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"

    - name: Create working branch
      shell: bash
      run: |
        # Create a new branch for Claude to work on
        BRANCH_NAME="claude-fix-$(date +%Y%m%d%H%M%S)"
        git checkout -b $BRANCH_NAME
        echo "CLAUDE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Run Claude in Docker container
      id: claude
      shell: bash
      run: |
        # Get the UID and GID of the current user on the host (the runner)
        HOST_UID=$(id -u)
        HOST_GID=$(id -g)
        echo "Host runner UID:GID = $HOST_UID:$HOST_GID"

        # Prepare a standard prefix for security-focused prompts
        PROMPT_PREFIX="Analyze and fix this bug, but NEVER modify security-related code. Don't touch authentication, authorization, or sensitive data handling. Work on a fix for the bug only. IMPORTANT: Edit the existing file or files directly instead of creating a new file, unless extracting duplicate functionality in to a new module. Your changes should be applied to the original files, not saved as prompt_file.txt. Create a Pull Request with your changes. "

        # Handle all three valid cases: prompt only, prompt-file only, or both
        if [ ! -z "${{ inputs.prompt }}" ] && [ ! -z "${{ inputs.prompt-file }}" ]; then
          # Both prompt and prompt-file are provided
          echo "Running Claude with both prompt argument and prompt-file input"
          echo "Prompt argument: ${{ inputs.prompt }}"
          echo "Prompt file: ${{ inputs.prompt-file }}"
          timeout 30m docker exec -i -u $HOST_UID:$HOST_GID claude-code-container claude -p --dangerously-skip-permissions "$PROMPT_PREFIX ${{ inputs.prompt }}" < ${{ inputs.prompt-file }} > ~/claude-output.txt
        elif [ ! -z "${{ inputs.prompt }}" ]; then
          # Only prompt is provided
          echo "Running Claude with prompt argument only"
          echo "Prompt: ${{ inputs.prompt }}"
          timeout 30m docker exec -i -u $HOST_UID:$HOST_GID claude-code-container claude -p --dangerously-skip-permissions "$PROMPT_PREFIX ${{ inputs.prompt }}" > ~/claude-output.txt
        elif [ ! -z "${{ inputs.prompt-file }}" ]; then
          # Only prompt-file is provided
          echo "Running Claude with prompt-file input only"
          echo "Prompt file: ${{ inputs.prompt-file }}"
          timeout 30m docker exec -i -u $HOST_UID:$HOST_GID claude-code-container claude -p --dangerously-skip-permissions < ${{ inputs.prompt-file }} > ~/claude-output.txt
        fi

        # Display the output in the logs
        cat ~/claude-output.txt

        # Set the output variable
        echo "result<<EOF" >> $GITHUB_OUTPUT
        cat ~/claude-output.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create PR if changes were made
      shell: bash
      env:
        # Use the PAT instead of GITHUB_TOKEN for PR creation
        GH_TOKEN: ${{ env.CLAUDE_CODE_FIX_PR_PAT }}
      run: |
        # Make sure any uncommitted changes are committed
        git add -A
        git commit -m "AI changes from Claude" || echo "No changes to commit"

        # Compare the current branch with main to detect changes
        DIFF_OUTPUT=$(git diff --name-only main..$CLAUDE_BRANCH)

        # Check if any differences exist between branches
        if [[ -n "$DIFF_OUTPUT" ]]; then
          echo "Changes detected between main and $CLAUDE_BRANCH:"
          echo "$DIFF_OUTPUT"

          # Push to the new branch
          git push -u origin $CLAUDE_BRANCH

          # Create PR using GitHub CLI with PAT
          gh pr create --title "Claude AI: Automated bug fix" \
                      --body "This PR was automatically created by Claude AI to fix the reported bug.

        ### Changes made:
        - Automated fixes based on the provided prompt
        - Generated by Claude AI

        ### Please review:
        - [ ] Code correctness
        - [ ] No security implications
        - [ ] Tests pass
        - [ ] No unintended changes

        AI-generated code requires thorough review." \
                            --base main
              else
                echo "GitHub CLI not available. Please create a PR manually from the $CLAUDE_BRANCH branch."
              fi
            else
              echo "No changes were made by Claude."
            fi
